package model1

// Code generated by ../../generators/models.go. DO NOT EDIT.
// You can regenerate it by running 'go generate ./models' from the directory above.

import (
	"github.com/roockie-nebula/gosunspec"
	"github.com/roockie-nebula/gosunspec/smdx"
	"github.com/roockie-nebula/gosunspec/typelabel"
)

// Block1 - Common - All SunSpec compliant devices must include this as the first model

const (
	ModelID          = 1
	ModelLabel       = "Common"
	ModelDescription = "All SunSpec compliant devices must include this as the first model"
)

const (
	DA  = "DA"
	Md  = "Md"
	Mn  = "Mn"
	Opt = "Opt"
	Pad = "Pad"
	SN  = "SN"
	Vr  = "Vr"
)

type Block1 struct {
	Mn  string      `sunspec:"offset=0,len=16"`
	Md  string      `sunspec:"offset=16,len=16"`
	Opt string      `sunspec:"offset=32,len=8"`
	Vr  string      `sunspec:"offset=40,len=8"`
	SN  string      `sunspec:"offset=48,len=16"`
	DA  uint16      `sunspec:"offset=64,access=rw"`
	Pad sunspec.Pad `sunspec:"offset=65,access=r"`
}

func (block *Block1) GetId() sunspec.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "common",
		Length: 66,
		Blocks: []smdx.BlockElement{
			{
				Length: 66,
				Points: []smdx.PointElement{
					{Id: Mn, Offset: 0, Type: typelabel.String, Length: 16, Mandatory: true, Label: "Manufacturer", Description: "Well known value registered with SunSpec for compliance"},
					{Id: Md, Offset: 16, Type: typelabel.String, Length: 16, Mandatory: true, Label: "Model", Description: "Manufacturer specific value (32 chars)"},
					{Id: Opt, Offset: 32, Type: typelabel.String, Length: 8, Label: "Options", Description: "Manufacturer specific value (16 chars)"},
					{Id: Vr, Offset: 40, Type: typelabel.String, Length: 8, Label: "Version", Description: "Manufacturer specific value (16 chars)"},
					{Id: SN, Offset: 48, Type: typelabel.String, Length: 16, Mandatory: true, Label: "Serial Number", Description: "Manufacturer specific value (32 chars)"},
					{Id: DA, Offset: 64, Type: typelabel.Uint16, Access: "rw", Label: "Device Address", Description: "Modbus device address"},
					{Id: Pad, Offset: 65, Type: typelabel.Pad, Access: "r"},
				},
			},
		}})
}
